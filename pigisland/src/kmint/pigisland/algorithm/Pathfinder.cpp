#include "Pathfinder.h"


int kmint::pigisland::Pathfinder::get_lowest(const map::map_graph &graph, const std::vector<int> &closedList,
                                             std::map<int, double> &distances) const
{
    int min = std::numeric_limits<int>::max();
    int node_id = 0;
    for (auto i = node_id; i < graph.num_nodes(); i++) {
        if (std::find(closedList.begin(), closedList.end(), graph[i].node_id()) == closedList.end() && distances[graph[i].node_id()] <= min) {
            min = distances[graph[i].node_id()];
            node_id = graph[i].node_id();
        }
    }

    return node_id;
}

std::vector<int>
kmint::pigisland::Pathfinder::reconstruct_path(std::map<int, int> &cameFrom, int current, int destination) const
{
    // Reconstruct a path from the parent list generated by the algorithm.
    int cur = destination;
    std::vector<int> path;
    while(cur != current) {
        cur = cameFrom[cur];
        path.emplace_back(cur);
    }

    std::reverse(path.begin(), path.end());
    path.emplace_back(destination);

    return path;
}

void kmint::pigisland::Pathfinder::tag(kmint::map::map_graph &graph, std::vector<int> &path, const node_tag t) const
{
    // Tags all nodes in the given path.
    for (auto p : path) {
        graph[p].tag(node_tag::path);
    }
}
